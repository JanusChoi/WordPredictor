4
tail(trueStatus)
4
table(pValues2 < 0.05, trueStatus)
4
24/5000
24/500
4
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
4
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
3
sum(1:6)/6
print(g2)
3
head(sh)
4
nh
median(resampledMedians)
median(sh)
3
sam <- sample(fh,nh*B,replace=TRUE)
3
resam <- matrix(sam,B,nh)
3
meds <- apply(resam,1,median)
4
median(meds)-median(fh) or median(fh)-median(meds)
median(meds)-median(fh)
3
sd(meds)
3
sd(resampledMedians)
3
quantile(resampledMedians,c(.025,.975))
3
quantile(meds,c(.025,.975))
dim(InsectSprays)
3
names(InsectSprays)
range(Bdata$count)
4
range(Cdate$count)
range(Cdata$count)
3
BCcounts
3
group
2
testStat
obs
obs <- testStat(BCcounts,group)
obs
4
mean(Bdata$count)-mean(Cdata$count)
sample()
sample
sample(group)
4
perms <- sapply(1 : 10000, function(i) testStat(BCcounts,sample(group)))
obs
mean(perms>obs)
E
3
testStat(DEcounts,group)
3
perms <- sapply(1 : 10000, function(i) testStat(DEcounts,sample(group)))
2
coinPlot(10)
3
coinPlot(10000)
2
qnorm(.95)
bye
info()
bye()
Sys.which("pdflatex")
sessionInfo()
Sys.getenv("PATH")
library(swirl)
swirl()
install_from_swirl("Regression Models")
install.packages("UsingR")
install.packages("UsingR")
install.packages("UsingR")
install.packages("UsingR")
install.packages("UsingR")
install.packages("UsingR")
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lm(child ~ parent,galton)
abline(regrling,lwd=3,col='red')
abline(regrline,lwd=3,col='red')
summary(regrline)
library(swirl)
swirl()
lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs - lhs
lhs -rhs
all.equal(lhs, rhs)
varChild <- var(lhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- est(ols.slope)
varEst <- est(ols.slope,ols.ic)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild,varRes + varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit)
mean(efit$residuals)
cov(attenu$mag)
cov(efit$residuals,attenu$mag)
cov(efit$residuals, attenu$dist)
cor(a,b)
info()
d2
cor(gpa_nor,gch_nor)
l_nor <- lm(child ~ parent, galton)
l_nor <- lm(gch_nor ~ gpa_nor)
x <- c(.18,-1.54,.42,.95)
w <- c(2,1,3,1)
minu <- sum(x*w) / sum(w)
final <- sum(w*(x-minu)^2)
c(minu,final)
mu <- c(.1471,1.077,.0025,.3)
for(v in mu)
{print( c(v,sum(w*(x-v)^2)))}
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(x,x*-1)
y <- c(y,y*-1)
mean(y)
plot(x,y)
cor(x,y) * sd(y)/sd(x)
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
cor(x,y) * sd(y)/sd(x)
sx <- 1/2
sy <- 1
cor <.5
cor * sy / sx
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
zx <- (x-mean(x))/sd(x)
zx
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(y,x)
b1 <- cor(x,y) * sd(y)/sd(x)
b0 <- mean(y) - b1 * mean(x)
b1
b0
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
sum((x-mean(x))^2)
mean(x)
for(u in c(.573, .0,.36,.44))
{}
for(u in c(.573, .0,.36,.44))
{ SSE <- sum((x-u)^2)
print(c(u,SSE))
}
rm(ls())
rm(list=ls())
rep("a~f",100)
sample(1:6)
sample(1:6,replace = T)
sample(1:6,100,replace = T)
install.packages("rJava")
install.packages("Rwordseg")
install.packages("wordclous")
install.packages("wordcloud")
install.packages("F:/迅雷下载/Rwordseg_0.2-1.zip", repos = NULL, type = "win.binary")
ChatHist <- read.csv("E:/wechat/ChatDataTest.txt", stringsAsFactors = FALSE, header = FALSE)
library(rJava)
library(Rwordseg)
Sys.setenv(JAVA_HOME='C:\Program Files\Java\jdk1.8.0_65\jre\bin\server')
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_65/jre/bin/server')
library(rJava)
tr <- (1.4,2,1,0.5,0.2,2.5)
trr <- c(0,1,1,0,0,1)
tr <- c(1.4,2,1,0.5,0.2,2.5)
table(tr,trr)
as.data.frame(tr+trr)
as.data.frame(tr)
rbind(tr,trr)
data <- rbind(tr,trr)
data
plot(data)
rbind(trr,tr)
tr
trr
unlist(tr)
table(unlist(tr))
table(tr)
table(tr,trr)
table(trr,tr)
data.frame(a=tr,b=trr)
data<-data.frame(a=tr,b=trr)
plot(data)
lines(lowes(b,data),col="blue")
lines(lowess(b,data),col="blue")
lines(lowess(a,data),col="blue")
lines(lowess(trr,data),col="blue")
lines(lowess(data$"ability.cov",data),col="blue")
lines(lowess(data$a,data),col="blue")
lines(lowess(data$a,data$b),col="blue")
data.frame(x=tr,y=c(40,58,43,24,70,64,35))
data.frame(x=tr,y=c(40,58,43,24,64,35))
data1<-data.frame(x=tr,y=c(40,58,43,24,64,35))
plot(data1)
sample(0.5~2.5,100)
sample(0.5:2.5,100,replace = T)
tsize <- sample(0.5:2.5,100,replace = T)
tage <- sample(35:65,100,replace=T)
data1<-data.frame(x=tage,y=tsize)
plot(data1)
tsize <- sample(0.5:2.5,100,replace = T,prob=.0)
tsize <- sample(0.5:2.5,100,replace = T,prob=.1)
tsize <- sample(0.5:2.5,100,replace = T,prob=10)
tsize <- sample(0.5:2.5,100,replace = T,prob=.2)
tsize <- sample(0.5:2.5,100,prob=.2,replace = T)
tsize <- sample(0.5:2.5, 100, replace = T, prob = 1)
tsize <- sample(5:25, 100, replace = T, prob = 1)
tsize <- sample(5:25, 100, replace = T)
tsize
tsize <- tsize/10
tsize
data1<-data.frame(x=tage,y=tsize)
plot(data1)
rm(ls())
rm(a=ls())
sleepdata <- read.csv("E:/Coursera/sleep/data1.csv")
sleepdata
d <- dist(sleepdata, method = "euclidean")
d <- dist(sleepdata)
hclust(sleepdata, method = "ward.D2")
d
hclust(d, method = "ward.D2")
res <- hclust(d, method = "ward.D2")
grp <- cutree(res, k=3)
plot(res, cex=0.6)
sleepdata2 <- read.csv("E:/Coursera/sleep/data2.csv")
d2 <- dist(sleepdata, method = "euclidean")
d2 <- dist(sleepdata2, method = "euclidean")
res2 <- hclust(d2, method = "ward.D2")
grp2 <- cutree(res2, k=3)
plot(res2, cex=0.6)
plot(res1, cex=0.6)
plot(res, cex=0.6)
library(RMongo)
install.packages("RMongo")
library(RMongo)
install.packages("rJava")
library(RMongo)
library(rJava)
install.packages("rJava")
library(rJava)
library(RMongo)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
knitr::opts_chunk$set(echo = TRUE)
setwd("E:\Coursera\Pratical Machine Learning")
setwd("E:\\Coursera\\Pratical Machine Learning")
if (!file.exists("./data")) {
dir.create("./data")
}
if (!file.exists("./data/pml-training.csv")) {
url.training <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(url.training, destfile = "./data/pml-training.csv")
}
if (!file.exists("./data/pml-testing.csv")) {
url.testing <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url.testing, destfile = "./data/pml-testing.csv")
}
training <- read.csv("./data/pml-training.csv")
testing <- read.csv("./data/pml-testing.csv")
library(knitr)
library(caret)
library(caret)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
library(corrplot)
install.packages("stringi")
library(knitr)
library(caret)
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
library(rattle)
install.packages("rattle")
library(rattle)
library(RGtk2)
install.packages("RGtk2")
install.packages("RGtk2")
install.packages("RGtk2Extras")
library(rattle)
library(randomForest)
install.packages("randomForest")
library(randomForest)
library(corrplot)
install.packages("corrplot")
library(corrplot)
set.seed(213)
inTrain  <- createDataPartition(training$classe, p=0.7, list=FALSE)
TrainSet <- training[inTrain, ]
TestSet  <- training[-inTrain, ]
dim(TrainSet)
dim(TestSet)
dim(TrainSet)
dim(TestSet)
AllNA    <- sapply(TrainSet, function(x) mean(is.na(x))) > 0.95
TrainSet <- TrainSet[, AllNA==FALSE]
TestSet  <- TestSet[, AllNA==FALSE]
NZV <- nearZeroVar(TrainSet)
TrainSet <- TrainSet[, -NZV]
TestSet  <- TestSet[, -NZV]
TrainSet <- TrainSet[, -(1:5)]
TestSet  <- TestSet[, -(1:5)]
dim(TrainSet)
dim(TestSet)
corMatrix <- cor(TrainSet[, -54])
corrplot(corMatrix, order = "FPC", method = "color", type = "lower", tl.cex = 0.8, tl.col = rgb(0, 0, 0))
controlRF <- trainControl(method = "cv", number=3, verboseIter = FALSE)
modFitRandForest <- train(classe ~ ., data = TrainSet, method = "rf", trControl=controlRF)
modFitRandForest$finalModel
predictRandForest <- predict(modFitRandForest, newdata=TestSet)
confMatRandForest <- confusionMatrix(predictRandForest,TestSet$classe)
confMatRandForest
plot(confMatRandForest$table, col = confMatRandForest$byClass,
main = paste("Random Forest - Accuracy =",
round(confMatRandForest$overall['Accuracy'], 4)))
modFitDecTree <- rpart(classe ~ ., data=TrainSet, method="class")
fancyRpartPlot(modFitDecTree)
library(rattle)
install.packages("E:/Coursera/Pratical Machine Learning/RGtk2_2.20.33.zip", repos = NULL, type = "win.binary")
library(rattle)
library(rattle)
install.packages("RGtk2")
install.packages("RGtk2", depen=T, type="source")
library(RGtk2)
updateR()
install.packages("installr")
library(installr)
updateR()
library(rattle)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFitDecTree)
fancyRpartPlot(modFitDecTree)
predictDecTree <- predict(modFitDecTree, newdata=TestSet, type="class")
confMatDecTree <- confusionMatrix(predictDecTree, TestSet$classe)
library(knitr)
library(knitr)
install.packages(knitr)
install.packages("knitr")
library(knitr)
library(caret)
install.packages("caret")
library(rpart)
library(rpart.plot)
library(randomForest)
install.packages("randomForest")
library(randomForest)
library(corrplot)
install.packages("corrplot")
library(corrplot)
predictDecTree <- predict(modFitDecTree, newdata=TestSet, type="class")
confMatDecTree <- confusionMatrix(predictDecTree, TestSet$classe)
install.packages("Rcpp")
confMatDecTree <- confusionMatrix(predictDecTree, TestSet$classe)
library(caret)
confMatDecTree <- confusionMatrix(predictDecTree, TestSet$classe)
library(e1071)
install.packages("e1071")
library(e1071)
confMatDecTree <- confusionMatrix(predictDecTree, TestSet$classe)
confMatDecTree <- confusionMatrix(predictDecTree, TestSet$classe)
confMatDecTree
plot(confMatDecTree$table, col = confMatDecTree$byClass, main = paste("Decision Tree - Accuracy =",round(confMatDecTree$overall['Accuracy'], 4)))
controlGBM <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
modFitGBM  <- train(classe ~ ., data=TrainSet, method = "gbm",trControl = controlGBM, verbose = FALSE)
controlGBM <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
modFitGBM  <- train(classe ~ ., data=TrainSet, method = "gbm",trControl = controlGBM, verbose = FALSE)
modFitGBM  <- train(classe ~ ., data=TrainSet, method = "gbm",trControl = controlGBM, verbose = FALSE)
# prediction on Test set
predictGBM <- predict(modFitGBM, newdata=TestSet)
confMatGBM <- confusionMatrix(predictGBM, TestSet$classe)
confMatGBM
# plot results for better understanding
plot(confMatGBM$table, col = confMatGBM$byClass,
main = paste("GBM - Accuracy =", round(confMatGBM$overall['Accuracy'], 4)))
predictTEST <- predict(modFitRandForest, newdata=testing)
predictTEST
library(rattle)
Sys.setenv(JAVA_HOME="C:\\ProgramData\\Oracle\\Java\\javapath")
install.packages("rJava")
library(rJava)
Sys.setenv(JAVA_HOME="D:\\Java\\jdk1.8.0_45")
library(rJava)
library(ridge)
library(las)
install.packages(ridge)
install.packages("ridge")
install.packages("ridge")
install.packages("lars")
install.packages("lasso")
setwd("E:/W4Wise/10_Projects/P06_DS_Capstone/final/en_US")
con <- file("en_US.blogs.txt")
data_blogs <- readLines(con)
max(data_blogs)
min(data_blogs)
length(max(data_blogs))
length(min(data_blogs))
length("adfadlkajlkdfj")
nchar("adfadlkajlkdfj")
nchar(max(data_blogs))
nchar(data_blogs)
summary(data_blogs)
which.max(lengths)
which(lengths==longest)
which.max(data_blogs)
cnt <- sapply(data_blogs, nrow)
data_blogs[cnt == max(cnt)]
cnt
cnt <- sapply(data_blogs, nchar)
data_blogs[1]
nchar(data_blogs[1])
nchar(data_blogs[2])
nchar(data_blogs[3])
data_blogs <- readLines(con, encoding = "UTF-8")
cnt <- sapply(data_blogs, nchar)
max(cnt)
con <- file("en_US.news.txt")
data_news <- readLines(con, encoding = "UTF-8")
cnt <- sapply(data_news, nchar)
max(cnt)
con <- file("en_US.twitter.txt")
data_twitter <- readLines(con, encoding = "UTF-8")
words <- strsplit(data_twitter, " ")
head(words)
words.freq <- table(unlist(words))
head(words.freq)
results <- cbind(names(words.freq), as.integer(words.freq))
head(results)
results["love"]
names(results)
results[results$1 == 'love']
names(results) <- c("word","freq")
results[results$word == 'love']
head(results)
results[results$word == 'love',]
results[getElement(results,"word") == 'love',]
results <- as.data.frame(results)
results[results$word == 'love',]
results[results$word == 'Love',]
names(results)
results[results$V1 == 'Love',]
results[results$V1 == 'love',]
results[results$V1 == 'hate',]
74248 / 15335
15335 / 74248
knitr::opts_chunk$set(echo = TRUE)
setwd("E:/W4Wise/10_Projects/P06_DS_Capstone/final/en_US")
con <- file("en_US.blogs.txt")
data_blogs <- readLines(con, encoding = "UTF-8")
con <- file("en_US.news.txt")
data_news <- readLines(con, encoding = "UTF-8")
con <- file("en_US.twitter.txt")
data_twitter <- readLines(con, encoding = "UTF-8")
con <- file("en_US.news.txt")
data_news <- readLines(con, encoding = "UTF-16LE")
con <- file("en_US.twitter.txt")
data_twitter <- readLines(con, encoding = "UTF-16LE")
con <- file("en_US.twitter.txt")
data_twitter <- readLines(con, encoding = "UCS-2LE")
con <- file("en_US.twitter.txt")
data_twitter <- readLines(con)
con <- file("en_US.blogs.txt")
data_blogs <- readLines(con, encoding = "UTF-8")
con <- file("en_US.news.txt")
data_news <- readLines(con, encoding = "UTF-16LE")
con <- file("en_US.twitter.txt")
data_twitter <- readLines(con, encoding = "UTF-16LE")
cnt <- sapply(data_blogs, nchar)
max(cnt)
cnt <- sapply(data_news, nchar)
setwd("E:/W4Wise/10_Projects/P06_DS_Capstone/final/en_US")
con <- file("en_US.blogs.txt")
data_blogs <- readLines(con, encoding = "UTF-8")
data_blogs <- sample(data_blogs, 5000)
con <- file("en_US.news.txt")
data_news <- readLines(con, encoding = "UTF-16LE")
data_news <- sample(data_news, 5000)
con <- file("en_US.twitter.txt")
data_twitter <- readLines(con, encoding = "UTF-16LE")
data_twitter <- sample(data_twitter, 10000)
summary(data_blogs)
